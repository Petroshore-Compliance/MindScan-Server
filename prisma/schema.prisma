// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Cambia a tu proveedor si usas MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int                   @id @default(autoincrement())
  name              String?
  email             String                @unique
  password          String?
  role              Role?
  company           Company?              @relation(fields: [company_id], references: [company_id])
  company_id        Int?
  access            UserDiagnosisAccess[]
  created_at        DateTime              @default(now())
  updated_at        DateTime?             @updatedAt
  connected_at      DateTime?
  userResponses     UserResponses[]
  userResult        Result[]
  CompanyInvitation CompanyInvitation[]
}

model Company {
  company_id   Int                 @id @default(autoincrement())
  name         String
  email        String              @unique
  users        User[]
  licenses     Int                 @default(0)
  licensesUsed Int                 @default(0)
  invitations  CompanyInvitation[]
  created_at   DateTime            @default(now())
  updated_at   DateTime?           @default(now()) @updatedAt
}

//esta tabla es para dar permisos a los usuarios para que vean los di√°gnosticos de otros usuarios
model UserDiagnosisAccess {
  access_id  Int       @id @default(autoincrement())
  has_access Boolean
  granted_by String
  user       User      @relation(fields: [user_id], references: [user_id])
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model CompanyInvitation {
  invitation_id    Int       @id @default(autoincrement())
  email            String
  user             User?     @relation(fields: [user_id], references: [user_id])
  user_id          Int?
  invitation_token String    @unique
  company          Company   @relation(fields: [company_id], references: [company_id])
  company_id       Int
  status           Status    @default(pending)
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt
}

model QuestionAnswer {
  questionAnswer_id Int             @id @default(autoincrement())
  answer_pt         String
  anser_es          String
  answer_en         String
  created_at        DateTime        @default(now())
  updated_at        DateTime?       @updatedAt
  userResponses     UserResponses[]
}

model Question {
  question_id   Int             @id @default(autoincrement())
  content_es    String
  content_en    String
  content_pt    String
  created_at    DateTime        @default(now())
  updated_at    DateTime?       @updatedAt
  userResponses UserResponses[]
}

//userResponses.response is {user_id: Int, [question_id: Int, answer: id],[question_id: Int, answer: id]...}
model UserResponses {
  userResponses_id  Int            @id @default(autoincrement())
  user              User           @relation(fields: [user_id], references: [user_id])
  user_id           Int
  question          Question       @relation(fields: [question_id], references: [question_id])
  question_id       Int
  questionAnswer    QuestionAnswer @relation(fields: [questionAnswer_id], references: [questionAnswer_id])
  questionAnswer_id Int
  created_at        DateTime       @default(now())
  updated_at        DateTime?      @updatedAt
}

model ContactForm {
  form_id    Int       @id @default(autoincrement())
  name       String
  email      String
  phone      String
  language   String
  message    String
  state      State     @default(new)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model PetroAdmin {
  petroAdmin_id Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  notifications Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  connected_at  DateTime?
}

model Result {
  resultado_id Int  @id @default(autoincrement())
  user         User @relation(fields: [user_id], references: [user_id])
  user_id      Int

  anxiety        Int
  hostility      Int
  depression     Int
  social_anxiety Int
  impulsivity    Int
  vulnerability  Int

  cordiality         Int
  gregariousness     Int
  assertiveness      Int
  activity           Int
  excitement_seeking Int
  positive_emotions  Int

  fantasy                Int
  aesthetic_appreciation Int
  feelings               Int
  actions                Int
  ideas                  Int
  values                 Int

  trust                 Int
  frankness             Int
  altruism              Int
  conciliatory_attitude Int
  modesty               Int
  sensitivity_to_others Int

  competence           Int
  orderliness          Int
  sense_of_duty        Int
  need_for_achievement Int
  self_discipline      Int
  deliberation         Int

  neuroticism_x_emotional_stability Int
  extraversion                      Int
  openness_to_experience            Int
  agreeableness_or_amiability       Int
  perseverance_or_responsibility    Int

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

enum Role {
  admin
  manager
  employee
}

enum Status {
  pending
  cancelled
  rejected
  accepted
  expired
}

enum State {
  new
  inProgress
  accepted
  rejected
  contacted
}
