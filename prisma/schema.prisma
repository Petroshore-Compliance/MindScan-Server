// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Cambia a tu proveedor si usas MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

model User {
  user_id           Int                   @id @default(autoincrement())
  name              String?
  email             String                @unique
  password          String?
  role              Role?
  company           Company?              @relation(fields: [company_id], references: [company_id])
  company_id        Int?
  responses         Response[]
  results           Result[]
  access            UserDiagnosisAccess[]
  created_at        DateTime              @default(now())
  updated_at        DateTime?             @updatedAt
  connected_at      DateTime?
  VerificationCodes VerificationCode[]
}

model VerificationCode {
  verificationcodes_id Int  @id @default(autoincrement())
  user                 User @relation(fields: [user_id], references: [user_id])
  user_id              Int  @unique
  code                 Int  @unique
}

model Company {
  company_id  Int                 @id @default(autoincrement())
  name        String
  email       String
  users       User[]
  invitations CompanyInvitation[]
  created_at  DateTime            @default(now())
  updated_at  DateTime?           @default(now()) @updatedAt
}

model Question {
  question_id Int        @id @default(autoincrement())
  content     String
  responses   Response[]
  created_at  DateTime   @default(now())
  updated_at  DateTime?  @updatedAt
}

model Response {
  response_id Int       @id @default(autoincrement())
  value       Int
  user        User      @relation(fields: [user_id], references: [user_id])
  user_id     Int
  question    Question  @relation(fields: [question_id], references: [question_id])
  question_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
}

model Result {
  result_id    Int       @id @default(autoincrement())
  completed_at DateTime  @default(now())
  user         User      @relation(fields: [user_id], references: [user_id])
  user_id      Int
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
}

//esta tabla es para dar permisos a los usuarios para que vean los diágnosticos de otros usuarios
model UserDiagnosisAccess {
  access_id  Int       @id @default(autoincrement())
  has_access Boolean
  granted_by String
  user       User      @relation(fields: [user_id], references: [user_id])
  user_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model CompanyInvitation {
  invitation_id    Int              @id @default(autoincrement())
  email            String
  status           InvitationStatus @default(pending)
  invitation_token String
  company          Company          @relation(fields: [company_id], references: [company_id])
  company_id       Int
  active           Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime?        @updatedAt
}

enum Role {
  admin
  manager
  employee
}

enum InvitationStatus {
  pending
  accepted
}

// quitar usertype, añadir contador licencias
//apuntar si ha usado una licencia, no pueda invitar mas usuarios que licencias, check if made or has licenses
//reorganizar diagnosticos para el trato de datos
//tabla admin, crear admin, log admin, get admins, change paswword admin, delete admin, receptor de emails?
//tabla preguntas, respuesta,respuestaDeUser, resultado
//idioma en las preguntas y respuesta
